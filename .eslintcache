[{"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\index.js":"1","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\App.js":"2","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\reportWebVitals.js":"3","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\PathVisualizer\\PathVisualizer.js":"4","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\Node\\Node.js":"5","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\dijkstra.js":"6","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\index.js":"7","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\dfs.js":"8","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\bfs.js":"9","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\astar.js":"10","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\visualizers\\index.js":"11","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\AppNavbar.js":"12","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\ErrorModal.js":"13","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\maze-algorithms\\recursiveDivision.js":"14","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\maze-algorithms\\randomMaze.js":"15","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\maze-algorithms\\index.js":"16","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\ToolTip.js":"17","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\visualizers\\algorithms.visualizer.js":"18","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\visualizers\\walls.visualizer.js":"19","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\Footer\\Footer.js":"20","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\DarkModeToggle\\DarkModeToggle.js":"21"},{"size":500,"mtime":499162500000,"results":"22","hashOfConfig":"23"},{"size":570,"mtime":1611293742175,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":16518,"mtime":1611294165432,"results":"26","hashOfConfig":"23"},{"size":817,"mtime":1611296182572,"results":"27","hashOfConfig":"23"},{"size":1458,"mtime":1610088922886,"results":"28","hashOfConfig":"23"},{"size":1692,"mtime":1609143261253,"results":"29","hashOfConfig":"23"},{"size":1640,"mtime":1610088350002,"results":"30","hashOfConfig":"23"},{"size":1638,"mtime":1610088547752,"results":"31","hashOfConfig":"23"},{"size":1453,"mtime":1610088720793,"results":"32","hashOfConfig":"23"},{"size":249,"mtime":1610725940360,"results":"33","hashOfConfig":"23"},{"size":3031,"mtime":1611218211362,"results":"34","hashOfConfig":"23"},{"size":361,"mtime":1609660713599,"results":"35","hashOfConfig":"23"},{"size":3405,"mtime":1609830672673,"results":"36","hashOfConfig":"23"},{"size":533,"mtime":1609833198430,"results":"37","hashOfConfig":"23"},{"size":153,"mtime":1609859100166,"results":"38","hashOfConfig":"23"},{"size":922,"mtime":1609933114842,"results":"39","hashOfConfig":"23"},{"size":1389,"mtime":1610725983022,"results":"40","hashOfConfig":"23"},{"size":574,"mtime":1610726100782,"results":"41","hashOfConfig":"23"},{"size":855,"mtime":1610541063825,"results":"42","hashOfConfig":"23"},{"size":2597,"mtime":1611216962772,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"151wpan",{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\index.js",[],["95","96"],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\App.js",["97"],"import React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport PathVisualizer from './components/PathVisualizer/PathVisualizer';\nimport { Container } from \"reactstrap\";\n\nclass App extends Component {\n  state = {}\n  \n  check = () => {\n    const res = document.body.classList.contains(\"DarkMode\");\n    console.log('checking for class existence of dark mode: ' + res);\n  }\n\n  render() { \n    return ( \n      <div>\n        <PathVisualizer />\n        <button onClick={this.check}>test</button>\n      </div>\n     );\n  }\n}\n \nexport default App;","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\PathVisualizer\\PathVisualizer.js",["98","99","100","101","102"],"import React, { Component } from 'react';\r\nimport \"./PathVisualizer.css\";\r\nimport Node from \"../Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder, dfs, bfs, astar } from \"../../algorithms\";\r\nimport { animatePath, animateWalls, setVisualizationState } from \"../../visualizers\";\r\nimport { recursiveDivisionMaze, randomMaze } from \"../../maze-algorithms\";\r\nimport AppNavbar from \"../AppNavbar\";\r\nimport ErrorModal from '../ErrorModal';\r\nimport { Progress } from \"reactstrap\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport TooltipExampleMulti from '../ToolTip';\r\n\r\n//constants\r\nlet START_NODE_ROW = 10;\r\nlet START_NODE_COL = 15;\r\nlet FINISH_NODE_ROW = 10;\r\nlet FINISH_NODE_COL = 35;\r\n\r\nclass PathVisualizer extends Component {\r\n    state = {\r\n        grid: [],\r\n        mouseIsPressed: false,\r\n        isPathNotFound: false,\r\n        totalNodes: 100,\r\n        shortestNodes: 0,\r\n        tooltipOpen: false,\r\n        isVisualizing: false,\r\n        mainIsPressed: \"\",\r\n        startNode: [START_NODE_ROW, START_NODE_COL],\r\n        finishNode: [FINISH_NODE_ROW, FINISH_NODE_COL],\r\n    }\r\n\r\n    // creates the grid when the component is mounted\r\n    componentDidMount() {\r\n        // this.setState({\r\n        //     startNode: [START_NODE_ROW, START_NODE_COL],\r\n        //     finishNode: [FINISH_NODE_ROW, FINISH_NODE_COL]\r\n        // });\r\n        let grid = this.getInitialGrid();\r\n        this.setState({ grid });\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({ tooltipOpen: !this.state.tooltipOpen });\r\n    }\r\n\r\n    // handling mouse events to set up walls\r\n    handleMouseDown(row, col) {\r\n        // start node | finish node\r\n        const { startNode, finishNode,grid } = this.state;\r\n        let start_x = startNode[0];\r\n        let start_y = startNode[1];\r\n        let finish_x = finishNode[0];\r\n        let finish_y = finishNode[1];\r\n        if (grid[row][col].isStart) {\r\n            this.setState({ mainIsPressed: \"start\" });\r\n            console.log(\"start node - main is pressed\")\r\n        }\r\n        else if (grid[row][col].isFinish) {\r\n            this.setState({ mainIsPressed: \"end\" });\r\n        }\r\n        const newGrid = gridWithWallToggled(this.state.grid, row, col);\r\n        this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n\r\n    handleMouseEnter(row, col) {\r\n        if (!this.state.mouseIsPressed)\r\n            return;\r\n        // start node | finish node\r\n        const { grid } = this.state;\r\n        if (this.state.mainIsPressed === \"start\") {\r\n            grid[row][col].isStart = true;\r\n            this.setState({ \r\n                startNode: [row,col]\r\n            });\r\n        }\r\n        else {\r\n            console.log(\"walls have no work here\")\r\n            const newGrid = gridWithWallToggled(this.state.grid, row, col);\r\n            this.setState({ grid: newGrid });\r\n        }\r\n    }\r\n\r\n    handleMouseLeave = (row, col) => {\r\n        let arr = this.state.grid;\r\n        if (this.state.mainClicked !== \"\") {\r\n            arr[row][col].isStart = false;\r\n            //arr[row][col].isEnd=false;\r\n            this.setState({\r\n                grid: arr\r\n            })\r\n        }\r\n    }\r\n\r\n    handleMouseUp = (row, col) => {\r\n        this.setState({ mouseIsPressed: false, mainIsPressed: \"\" });\r\n        //console.log(\"mouse up is called\")\r\n        const { grid } = this.state;\r\n        grid[row][col].isStart = true;\r\n    }\r\n\r\n/*----------------------------------------------------------algorithm helper functions---------------------------------------------------------*/\r\n    // dijkstra\r\n    visualizeDijkstra = () => {\r\n        if (this.state.isVisualizing)\r\n            return;\r\n        const {grid} = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        try {\r\n            const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n            const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n            this.setState({\r\n                shortestNodes: nodesInShortestPathOrder.length,\r\n                totalNodes: visitedNodesInOrder.length\r\n            });\r\n            animatePath(this, visitedNodesInOrder, nodesInShortestPathOrder, startNode, finishNode);\r\n        } catch (error) {\r\n            console.log(\"path not found\")\r\n            this.setState({ isPathNotFound: true });\r\n            setTimeout(() => {\r\n                this.setState({ isPathNotFound: false });\r\n            }, 3000);\r\n        }\r\n        console.log(this.state.isVisualizing)\r\n        //this.setState({ isVisualizing: !this.state.isVisualizing });\r\n    }\r\n\r\n    // dfs\r\n    visualizeDFS = () => {\r\n        if (this.state.isVisualizing)\r\n            return;\r\n        const {grid} = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        try {\r\n            const visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n            const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n            this.setState({\r\n                shortestNodes: nodesInShortestPathOrder.length,\r\n                totalNodes: visitedNodesInOrder.length\r\n            });\r\n            animatePath(this, visitedNodesInOrder, nodesInShortestPathOrder, startNode, finishNode);\r\n        } catch (error) {\r\n            console.log(\"path not found\")\r\n            this.setState({ isPathNotFound: true });\r\n            setTimeout(() => {\r\n                this.setState({ isPathNotFound: false });\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    // bfs\r\n    visualizeBFS = async () => {\r\n        if (this.state.isVisualizing)\r\n            return;\r\n        const { grid } = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        try {\r\n            const visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n            const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n            this.setState({\r\n                shortestNodes: nodesInShortestPathOrder.length,\r\n                totalNodes: visitedNodesInOrder.length\r\n            });\r\n            animatePath(this, visitedNodesInOrder, nodesInShortestPathOrder, startNode, finishNode);\r\n        } catch (error) {\r\n            console.log(\"path not found\")\r\n            this.setState({ isPathNotFound: true });\r\n            setTimeout(() => {\r\n                this.setState({ isPathNotFound: false });\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    // astar\r\n    visualizeAstar = () => {\r\n        if (this.state.isVisualizing)\r\n            return;\r\n        console.log(\"a star\");\r\n        const { grid } = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        try {\r\n            const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n            const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n            this.setState({\r\n                shortestNodes: nodesInShortestPathOrder.length,\r\n                totalNodes: visitedNodesInOrder.length\r\n            });\r\n            animatePath(this, visitedNodesInOrder, nodesInShortestPathOrder, startNode, finishNode);\r\n        } catch (error) {\r\n            console.log(\"path not found\")\r\n            this.setState({ isPathNotFound: true });\r\n            setTimeout(() => {\r\n                this.setState({ isPathNotFound: false });\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n/*----------------------------------------------------------clear helper functions---------------------------------------------------------*/\r\n    clearGrid = () => {\r\n        if (this.state.isVisualizing)\r\n            return;\r\n        for (let row = 0; row < this.state.grid.length; row++) {\r\n            for (let col = 0; col < this.state.grid[0].length; col++) {\r\n                if (!((row === START_NODE_ROW && col === START_NODE_COL) || (row === FINISH_NODE_ROW && col === FINISH_NODE_COL))) {\r\n                    document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n                }\r\n            }\r\n        }\r\n        const newGrid = this.getInitialGrid();\r\n        this.setState({ grid: newGrid });\r\n    }\r\n\r\n    clearPath = () => {\r\n        if (this.state.isVisualizing)\r\n            return;\r\n        for (let row = 0; row < this.state.grid.length; row++) {\r\n            for (let col = 0; col < this.state.grid[0].length; col++) {\r\n                if ((document.getElementById(`node-${row}-${col}`).className === \"node node-shortest-path\") || document.getElementById(`node-${row}-${col}`).className === \"node node-visited\") {\r\n                    document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n                }\r\n            }\r\n        }\r\n        const newGrid = getGridWithoutPath(this.state.grid);\r\n        this.setState({ grid: newGrid });\r\n    }\r\n\r\n/*----------------------------------------------------------maze generations functions---------------------------------------------------------*/\r\n    generateRecursiveDivisionMaze = () => {\r\n        if (this.state.isVisualizing)\r\n            return;\r\n        this.setState({ isVisualizing: true });\r\n        const { grid } = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const walls = recursiveDivisionMaze(grid, startNode, finishNode);\r\n        console.log(walls);\r\n        //animateWalls(this,walls, grid);\r\n        this.animateWalls(walls, grid);\r\n    }\r\n\r\n    generateRandomMaze = () => {\r\n        if (this.state.isVisualizing)\r\n            return;\r\n        this.setState({ isVisualizing: true });\r\n        const { grid } = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const walls = randomMaze(grid, startNode, finishNode);\r\n        console.log(walls);\r\n        this.animateWalls(walls, grid);\r\n        // const msg = this.animateWalls(walls, grid);\r\n        // console.log(msg);\r\n        // if (msg) {\r\n        //     const newGrid = getNewGridWithMaze(this.state.grid, walls);\r\n        //     this.setState({ grid: newGrid });\r\n        // }\r\n    }\r\n\r\n    animateWalls = (walls, grid) => {\r\n        for (let i = 0; i <= walls.length; i++) {\r\n            if (i === walls.length) {\r\n                setTimeout(() => {\r\n                    const newGrid = getNewGridWithMaze(this.state.grid, walls);\r\n                    this.setState({ grid: newGrid, isVisualizing: false });\r\n                }, 10 * i);\r\n                return ;\r\n            }\r\n            setTimeout(() => {\r\n                const wall = walls[i];\r\n                const node = grid[wall[0]][wall[1]];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-animated-wall\";\r\n            }, 10 * i);\r\n        }\r\n    }\r\n\r\n    setVisualization = () => {\r\n        this.setState({\r\n            isVisualizing: !this.state.isVisualizing\r\n        });\r\n    }\r\n\r\n    handleClick = () => {\r\n        setVisualizationState(this);\r\n    }\r\n\r\n    render() {\r\n        const { grid, mouseIsPressed } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <TooltipExampleMulti />\r\n                {this.state.isPathNotFound ? <ErrorModal /> : null }\r\n                <AppNavbar\r\n                    handleDijkstra={this.visualizeDijkstra}\r\n                    handleDFS={this.visualizeDFS}\r\n                    handleBFS={this.visualizeBFS}\r\n                    handleAstar={this.visualizeAstar}\r\n                    handleClearPath={this.clearPath}\r\n                    handleClearGrid={this.clearGrid}\r\n                    handleMaze={this.generateRecursiveDivisionMaze}\r\n                    handleRandomMaze={this.generateRandomMaze}\r\n                    handleVisualization={this.setVisualization}\r\n                />\r\n                <Progress multi>\r\n                    <Progress bar animated value={(this.state.shortestNodes/this.state.totalNodes)*100}>{ ((this.state.shortestNodes/this.state.totalNodes)*100).toPrecision(4) }%</Progress>\r\n                </Progress>\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const { row, col, isStart, isFinish, isWall } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            row={row}\r\n                                            col={col}\r\n                                            isStart={isStart}\r\n                                            isFinish={isFinish}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={mouseIsPressed}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp(row,col)}\r\n                                            onMouseLeave={(row, col) => this.handleMouseLeave(row, col)}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <Footer />\r\n            </>\r\n         );\r\n    }\r\n\r\n    // creating the initial grid, calls the createNode() function\r\n    // to initialise the node with initial properties\r\n    //const \r\n    getInitialGrid = () => {\r\n        let grid = [];\r\n        const { startNode, finishNode } = this.state;\r\n        for (let row = 0; row < 20; row++) {\r\n            const currRow = [];\r\n            for (let col = 0; col < 40; col++) { //  previously I had it as 20*50\r\n                //currRow.push(createNode(row, col));\r\n                currRow.push(createNode(row, col, startNode, finishNode));\r\n            }\r\n            grid.push(currRow);\r\n        }\r\n        return grid;\r\n    }\r\n\r\n}\r\n\r\nexport default PathVisualizer;\r\n\r\n/*------------------------------------------------------------helper functions----------------------------------------------------------------*/\r\n\r\n// prev getInitialGrid func was here\r\n\r\n// initialising the node with its initial properties\r\nconst createNode = (row, col, startNode, finishNode) => {\r\n    let start_x = startNode[0];\r\n    let start_y = startNode[1];\r\n    let finish_x = finishNode[0];\r\n    let finish_y = finishNode[1];\r\n\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === start_x && col === start_y,\r\n        isFinish: row === finish_x && col === finish_y,\r\n        isWall: false,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        previousNode: null,\r\n        distanceToFinishNode: Math.abs(finish_x - row) + Math.abs(finish_y - col)\r\n    }\r\n}\r\n\r\n// updating the grid, when the walls are tiggered\r\nconst gridWithWallToggled = (grid, row, col) => {\r\n    let newGrid = grid.slice();\r\n    const node = newGrid[row][col];\r\n    const newNode = {\r\n        ...node,\r\n        isWall: !node.isWall\r\n    }\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n}\r\n\r\n// updating the grid, resetting the features except for the walls\r\nconst getGridWithoutPath = (grid) => {\r\n    let newGrid = grid.slice();\r\n    for (let row of grid) {\r\n        for (let node of row) {\r\n            let newNode = {\r\n                ...node,\r\n                distance: Infinity,\r\n                isVisited: false,\r\n                previousNode: null,\r\n                distanceToFinishNode: Math.abs(FINISH_NODE_ROW - node.row) + Math.abs(FINISH_NODE_COL - node.col)\r\n            };\r\n            newGrid[node.row][node.col] = newNode;\r\n        }\r\n    }\r\n    return newGrid;\r\n}\r\n\r\nconst getNewGridWithMaze = (grid, walls) => {\r\n  let newGrid = grid.slice();\r\n  for (let wall of walls) {\r\n    let node = grid[wall[0]][wall[1]];\r\n    let newNode = {\r\n      ...node,\r\n      isWall: true,\r\n    };\r\n    newGrid[wall[0]][wall[1]] = newNode;\r\n  }\r\n  return newGrid;\r\n};","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\Node\\Node.js",["103","104","105"],"import React, { Component } from 'react';\r\nimport \"./Node.scss\";\r\nimport xwing from \"../../images/x-wing.png\";\r\nimport deathstar from \"../../images/death-star.png\";\r\n\r\nconst Node = (props) => {\r\n    const { row, col, isStart, isFinish, isWall, onMouseDown, onMouseEnter, onMouseUp, onMouseLeave } = props;\r\n    const extraClassName = isStart ? 'node-start' : isFinish ? 'node-finish' : isWall ? 'node-wall' : '' ; \r\n\r\n    return ( \r\n        <div\r\n            id={`node-${row}-${col}`}\r\n            className={`node ${extraClassName}`}\r\n            onMouseDown={() => onMouseDown(row, col)}\r\n            onMouseEnter={() => onMouseEnter(row, col)}\r\n            onMouseUp={() => onMouseUp(row,col)}\r\n            onMouseLeave={() => onMouseLeave(row, col)}\r\n        >\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Node;","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\dijkstra.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\index.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\dfs.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\bfs.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\algorithms\\astar.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\visualizers\\index.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\AppNavbar.js",["106"],"import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  NavbarText,\r\n  Button,\r\n  ButtonGroup,\r\n  Progress\r\n} from 'reactstrap';\r\nimport DarkModeToggle from './DarkModeToggle/DarkModeToggle';\r\n\r\nconst AppNavbar = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">PathVisualizer</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/Sethuram52001/Path-Finding-Visualizer\">GitHub</NavLink>\r\n            </NavItem>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Algorithms\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  <Button onClick={() => { props.handleDijkstra(); props.handleVisualization() }}>Dijkstra</Button>\r\n                  {/* <Button onClick={ props.handleDijkstra}>Dijkstra</Button> */}\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  <Button onClick={() => { props.handleDFS(); props.handleVisualization() }}>DFS</Button>              \r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  <Button onClick={() => { props.handleBFS(); props.handleVisualization() }}>BFS</Button>\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  <Button onClick={() => { props.handleAstar(); props.handleVisualization() }}>Astar</Button>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n            <UncontrolledDropdown nav inNavbar>\r\n              <DropdownToggle nav caret>\r\n                Generate Maze\r\n              </DropdownToggle>\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  <Button onClick={() => { props.handleMaze(); props.handleVisualization() }}>Recursive Division</Button>\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                    <Button onClick={props.handleRandomMaze}>Random Maze</Button>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>  \r\n        </Collapse>\r\n        <NavbarText>\r\n          <ButtonGroup>\r\n            <Button id={\"Tooltip-\" + 0} onClick={props.handleClearPath}>Clear Path</Button>\r\n            <Button id={\"Tooltip-\" + 1} onClick={props.handleClearGrid}>Clear Grid</Button>\r\n          </ButtonGroup>          \r\n        </NavbarText>   \r\n        <NavbarText>\r\n          <DarkModeToggle />\r\n        </NavbarText>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppNavbar;","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\ErrorModal.js",["107"],"import React, { useState } from 'react';\r\nimport { Modal, ModalHeader } from 'reactstrap';\r\n\r\nconst ErrorModal = (props) => {\r\n  const {\r\n    className\r\n  } = props;\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={true} className={className}>\r\n        <ModalHeader>Path not found</ModalHeader>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorModal;\r\n","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\maze-algorithms\\recursiveDivision.js",[],["108","109"],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\maze-algorithms\\randomMaze.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\maze-algorithms\\index.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\ToolTip.js",["110"],"\r\nimport React, { useState } from \"react\";\r\nimport { Button, Tooltip } from \"reactstrap\";\r\n\r\nconst TooltipItem = props => {\r\n  const { item, id } = props;\r\n  const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n  const toggle = () => setTooltipOpen(!tooltipOpen);\r\n\r\n  return (\r\n    <span>\r\n      <Tooltip\r\n        placement={item.placement}\r\n        isOpen={tooltipOpen}\r\n        target={\"Tooltip-\" + id}\r\n        toggle={toggle}\r\n      >\r\n        {item.text}\r\n      </Tooltip>\r\n    </span>\r\n  );\r\n};\r\n\r\nconst TooltipExampleMulti = props => {\r\n  return (\r\n    <>\r\n      {[\r\n        {\r\n          placement: \"bottom\",\r\n          text: \"clearPathToolTip\"\r\n        },\r\n        {\r\n          placement: \"bottom\",\r\n          text: \"clearGridToolTip\"\r\n        }\r\n      ].map((tooltip, i) => {\r\n        return <TooltipItem key={i} item={tooltip} id={i} />;\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TooltipExampleMulti;","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\visualizers\\algorithms.visualizer.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\visualizers\\walls.visualizer.js",[],"C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\Footer\\Footer.js",["111","112","113","114"],"import React, { Component } from 'react';\r\nimport \"./Footer.css\";\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faLinkedin, faGithub, faMedium } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Footer = () => {\r\n    return ( \r\n        <div className=\"bg-dark text-center\">\r\n            {/* <FontAwesomeIcon icon={faGithub} className=\"m-2\" />\r\n            <FontAwesomeIcon icon={faLinkedin} className=\"m-2\" />\r\n            <FontAwesomeIcon icon={faMedium} className=\"m-2\" />  */}\r\n            <a href=\"https://www.linkedin.com/in/sethuram-s-v-171719194/\" className=\"fa fa-linkedin\"></a>\r\n            <a href=\"https://github.com/Sethuram52001\" className=\"fa fa-github\"></a>\r\n            <a href=\"https://sethuram52001.medium.com/\" className=\"fa fa-medium\"></a>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Footer;\r\n","C:\\Users\\sethu\\OneDrive\\Desktop\\Web-Dev\\React\\path-finding-visualizer\\src\\components\\DarkModeToggle\\DarkModeToggle.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":4,"column":10,"nodeType":"121","messageId":"122","endLine":4,"endColumn":19},{"ruleId":"119","severity":1,"message":"123","line":5,"column":23,"nodeType":"121","messageId":"122","endLine":5,"endColumn":35},{"ruleId":"119","severity":1,"message":"124","line":51,"column":13,"nodeType":"121","messageId":"122","endLine":51,"endColumn":20},{"ruleId":"119","severity":1,"message":"125","line":52,"column":13,"nodeType":"121","messageId":"122","endLine":52,"endColumn":20},{"ruleId":"119","severity":1,"message":"126","line":53,"column":13,"nodeType":"121","messageId":"122","endLine":53,"endColumn":21},{"ruleId":"119","severity":1,"message":"127","line":54,"column":13,"nodeType":"121","messageId":"122","endLine":54,"endColumn":21},{"ruleId":"119","severity":1,"message":"128","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":26},{"ruleId":"119","severity":1,"message":"129","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":13},{"ruleId":"119","severity":1,"message":"130","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":17},{"ruleId":"119","severity":1,"message":"131","line":17,"column":3,"nodeType":"121","messageId":"122","endLine":17,"endColumn":11},{"ruleId":"119","severity":1,"message":"132","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"115","replacedBy":"133"},{"ruleId":"117","replacedBy":"134"},{"ruleId":"119","severity":1,"message":"135","line":3,"column":10,"nodeType":"121","messageId":"122","endLine":3,"endColumn":16},{"ruleId":"119","severity":1,"message":"128","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":26},{"ruleId":"136","severity":1,"message":"137","line":12,"column":13,"nodeType":"138","endLine":12,"endColumn":102},{"ruleId":"136","severity":1,"message":"137","line":13,"column":13,"nodeType":"138","endLine":13,"endColumn":81},{"ruleId":"136","severity":1,"message":"137","line":14,"column":13,"nodeType":"138","endLine":14,"endColumn":82},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'animateWalls' is defined but never used.","'start_x' is assigned a value but never used.","'start_y' is assigned a value but never used.","'finish_x' is assigned a value but never used.","'finish_y' is assigned a value but never used.","'Component' is defined but never used.","'xwing' is defined but never used.","'deathstar' is defined but never used.","'Progress' is defined but never used.","'useState' is defined but never used.",["139"],["140"],"'Button' is defined but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]